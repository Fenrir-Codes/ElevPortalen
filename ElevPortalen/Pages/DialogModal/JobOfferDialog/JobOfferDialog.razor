@using ElevPortalen.Models
@using ElevPortalen.Services;
@using ElevPortalen.Pages.AlertBox
@using System.Threading

@inject JobService _jobService
@inject DawaService dawaService
@inject NavigationManager _navmanager

<div class="col-xl-12 col-md-12 col-sm-12">
    <!--Header of the update page-->
    <div class="card-header d-flex justify-content-center" style="background-color:black; color:white; height:55px;">
        Opret jobtilbud
    </div>

    <div class="container px-4">

        <form>
            <div class="col-md-6">
                <label for="title" class="form-label">Jobtitel</label>
                <input type="text" class="form-control" id="title" @bind="job.Title" placeholder="Jobtitel">
            </div>
            <div class="col-md-6">
                <label class="small mb-1 fw-bold" for="inputaddress">Addresse</label>
                <input class="form-control" list="addressSuggestions" @bind="job.JobAddress" placeholder="Enter address"
                       @oninput="UpdateDropdownWithDelay">
                <datalist id="addressSuggestions">
                    @foreach (var item in address)
                    {
                        <!-- Option for each address suggestion -->
                        <option value="@item.adresse.adresseringsvejnavn @item.adresse.husnr @item.adresse.etage @item.adresse.dør @item.adresse.postnr @item.adresse.postnrnavn">
                            <!-- Display street name and house number for each address suggestion -->
                            @item.adresse.adresseringsvejnavn @item.adresse.husnr @item.adresse.etage @item.adresse.dør @item.adresse.postnr @item.adresse.postnrnavn
                        </option>
                    }
                </datalist>
            </div>
@*             <div class="mb-3">
                <label for="jobAddress" class="form-label">Job Address</label>
                <input type="text" class="form-control" id="jobAddress" @bind="job.JobAddress">
            </div> *@
            <div class="mb-3">
                <label for="jobLink" class="form-label">Link til jobbet</label>
                <input type="text" class="form-control" id="jobLink" @bind="job.JobLink" placeholder="www.example.com">
            </div>
            <div class="mb-3">
                <label for="jobDetails" class="form-label">Job beskrivelse</label>
                <textarea class="form-control" id="jobDetails" rows="6" @bind="job.JobDetails"></textarea>
            </div>
            <div class="mb-3">
                <label for="numberOfPositions" class="form-label">Antal ledige stillinger</label>
                <input type="number" class="form-control" id="numberOfPositions" @bind="job.NumberOfPositionsAvailable">
            </div>
            <div class="mb-3">
                <label for="speciality" class="form-label">Specialisering</label>
                <input type="text" class="form-control" id="speciality" @bind="job.Speciality">
            </div>
            <div class="mb-3">
                <label for="deadline" class="form-label">Deadline</label>
                <input type="date" id="deadline" class="form-control" @bind="job.Deadline" />
            </div>
        </form>

        <p>the company id is : @companyId</p>

    </div>

</div>

<AlertBox @ref="_alertBox" />


@code {
    [Parameter] public int companyId { get; set; }
    [Parameter] public JobOfferModel? job { get; set; }
    private List<AddressModel> address = new List<AddressModel>();
    private AlertBox _alertBox = new AlertBox();
    private CancellationTokenSource? cancellationTokenSource;
    private string? searchTerm;

    #region Initialize
    protected override void OnInitialized()
    {
        SetValues();
    }
    #endregion

    #region Set get and set companyid
    private void SetValues()
    { 
        job.CompanyId = companyId;
        job.DateOfPublish = DateTime.Now;
        job.Deadline = DateTime.Now.AddDays(20);
    }
    #endregion

    #region Method to update address suggestions with a delay
    private async Task UpdateDropdownWithDelay(ChangeEventArgs args)
    {
        searchTerm = args.Value?.ToString();

        <!-- Cancel the previous delay if any -->
        cancellationTokenSource?.Cancel();

        <!-- Create a new cancellation token for the delay -->
        cancellationTokenSource = new CancellationTokenSource();

        try
        {
            <!-- Delay for 300 milliseconds before fetching suggestions -->
            await Task.Delay(300, cancellationTokenSource.Token);
        }
        catch (TaskCanceledException)
        {
            <!-- Delay was canceled due to a new input change -->
            return;
        }

        <!-- Fetch and update address suggestions based on the searchTerm -->
        if (!string.IsNullOrWhiteSpace(searchTerm))
        {
            searchTerm = char.ToUpper(searchTerm[0]) + searchTerm.Substring(1);
            var (addresses, errorMessage) = await dawaService.GetAddress(searchTerm);

            if (addresses != null)
            {
                address = addresses;
            }
            else
            {
                // Handle the error case, show a message to the user
                _alertBox.SetMessage(true, errorMessage, 10000, warning: true);
            }
        }
        else
        {
            // Handle the case where the search term is empty, show a message to the user
            _alertBox.SetMessage(true, "Please type your address.", 5000, warning: true);
            address = new List<AddressModel>();
        }

        <!-- Trigger a re-render to update the UI -->
        StateHasChanged();
    }
    #endregion


}
