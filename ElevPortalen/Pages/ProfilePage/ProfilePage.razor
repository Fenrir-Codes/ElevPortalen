@page "/profile"
@*Lavet af Jozsef*@

@using ElevPortalen.Pages.AlertBox
@using ElevPortalen.Pages.DialogModal
@using ElevPortalen.Pages.ProfilePage.CompanyProfile
@using ElevPortalen.Pages.ProfilePage.StudentProfile
@using ElevPortalen.Services;
@using ElevPortalen.Data;
@using ElevPortalen.Models;
@using System.Security.Claims

@inject StudentService _studentService
@inject CompanyService _companyService
@inject SkillService _skillService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavManager
@inject IJSRuntime jsRuntime

<div class="container p-4">
    <!--Autorizeview for Student and Company -->
    <AuthorizeView Roles="Student,Company,Admin">
        <Authorized>

            @if (context.User.IsInRole(Student))
            {
                <StudentProfile _user="_user"></StudentProfile>
            }
            else if (context.User.IsInRole(Company))
            {
                <CompanyProfile _user="_user"></CompanyProfile>
            }
            else
            {
                <p>
                    @if (_authState.User.IsInRole(Student) || _authState.User.IsInRole(Company))
                    {
                        <AlertBox IsVisible=true Message="Det ser ud til, at ingen personlige data er blevet tilføjet til din profil, klik på knappen for at registrere dine data."
                                    isWarning=true waitForSeconds="0"></AlertBox>
                    }
                    else
                    {
                        <AlertBox IsVisible=true Message="Du har ingen rolle tildelt!" isDanger=true waitForSeconds="0"></AlertBox>
                    }
                </p>
                <br>
                <button class="btn btn-success m-2" @onclick="NavigateToRegister">Registrer dine data</button>
                ;
                <br />

                @if (hasStudentRecoveryData)
                {
                    <button class="btn btn-success m-2" @onclick="RecoverStudentData">Gendan data</button>
                    @*      <p>The Student's Guid is : @userIdClaim</p> *@

                }
                else if (hasCompanyRecoveryData)
                {
                    <button class="btn btn-success m-2" @onclick="RecoverCompanyData">Gendan Firma data</button>
                    @*  <p>The Company's Guid is : @userIdClaim</p> *@
                }

            }

            <!-- DialogModal for update view -->
            <DialogModal @ref="DialogModal" profileId="@Id" OnClose="ReRenderPage"></DialogModal>

        </Authorized>

        <!-- Not authorized view -->
        <NotAuthorized>
            <AlertBox IsVisible=true Message="Please log in first." isDanger=true waitForSeconds="0"></AlertBox>
        </NotAuthorized>

    </AuthorizeView>

    <AlertBox @ref="_aletBox" />

</div>


@code {

    #region private fields within the scope of the class
    private AuthenticationState? _authState;
    private ClaimsPrincipal? _user;
    private List<StudentModel> _student = new List<StudentModel>();
    private List<CompanyModel> _company = new List<CompanyModel>();
    private SkillModel _Skills = new SkillModel();
    private List<string> _SkillsOfStudent = new List<string>();

    private DialogModal? DialogModal { get; set; }
    private AlertBox? _aletBox = new AlertBox();

    private bool isAuthenticated = false;
    private bool isConfirmationChecked = false;
    private bool isAddSectionVisible = false;
    private bool isUpdateSectionVisible = false;

    private string Company = "Company";
    private string Student = "Student";
    private string? Message = "";
    private string _Name = "Default";
    private string _registeredDate = "";

    private string BackgroundColor = "rgba(50, 50, 50,0.8)";
    private string textColor = "white";

    // The StudentId
    private int newMessages = 0;
    private int Id { get; set; }
    private bool hasStudentRecoveryData = false;
    private bool hasCompanyRecoveryData = false;
    private string userIdClaim = "";
    #endregion

    #region OnInitialize
    protected override async Task OnInitializedAsync()
    {
        // Getting the user current authentication state.
        _authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();

        if (_authState != null)
        {
            if (_authState.User.Identity?.IsAuthenticated == true && _authState != null && _authState.User != null)
            {
                _user = _authState.User;
                // If authenticated set the bool to true zhan read the users data from the data table with the help of ReadData function
                isAuthenticated = true;
                _Name = _user.Identity.Name!.ToString();
               /*  await ReadData(); */ //Read profile data
            }
            else
            {
                isAuthenticated = false;
            }
        }
    }
    #endregion

    #region Reading the data from the database with the user claims
    public async Task ReadData()
    {
        if (_authState != null && _authState.User != null)
        {
            //Authenticating the user
            _user = _authState.User;

            if (_authState.User.IsInRole(Student)) // If the role is Student
            {
                //Getting the data with the service call from student
                await GetStudentData(_user);
                //Read skills data connected to the profile
                await GetSkills(_student);

                if (_student.Any() == false || _student == null)
                {
                    await CheckIfStudentHasDataToRecover(_user);
                }
            }
            else if (_authState.User.IsInRole(Company)) // If the role is Company
            {
                //Getting the data with the service call from company
                await GetCompanyData(_user);

                if (_company.Any() == false || _company == null)
                {
                    await CheckIfCompanyHasDataToRecover(_user);
                }
            }
            else
            {
                _aletBox.SetMessage(true, $"You Have No Role Assigned - Could not read data.", 0, danger: true);
            }
        }
    }
    #endregion

    #region Getting the data with the service call from student
    private async Task GetStudentData(ClaimsPrincipal _user)
    {
        _student = await _studentService.ReadData(_user);
    }
    #endregion

    #region Getting the skill Name to List (string)
    private async Task GetSkills(List<StudentModel> data)
    {
        foreach (var studentData in _student)
        {
            _SkillsOfStudent = await _skillService.GetSkills(studentData);
        }
    }
    #endregion

    #region Getting the data with the service call from company
    private async Task GetCompanyData(ClaimsPrincipal _user)
    {
        _company = await _companyService.ReadData(_user);
    }
    #endregion

    #region Checking is student has recovery data if nothing exist in their profile
    private async Task CheckIfStudentHasDataToRecover(ClaimsPrincipal _user)
    {
        if (_student.Any() == false || _student == null)
        {
            userIdClaim = _user.Claims.FirstOrDefault()!.Value;
            if (userIdClaim != null && Guid.TryParse(userIdClaim, out Guid userIdGuid))
            {
                bool recoveryDataExists = await _studentService.CheckRecoveryDataExist(userIdGuid);
                hasStudentRecoveryData = recoveryDataExists;
            }
        }
    }
    #endregion

    #region Checking is company has recovery data if nothing exist in their profile
    private async Task CheckIfCompanyHasDataToRecover(ClaimsPrincipal _user)
    {
        if (_company.Any() == false || _company == null)
        {
            userIdClaim = _user.Claims.FirstOrDefault()!.Value;
            if (userIdClaim != null && Guid.TryParse(userIdClaim, out Guid userIdGuid))
            {
                bool recoveryDataExists = await _companyService.CheckRecoveryDataExist(userIdGuid);
                hasCompanyRecoveryData = recoveryDataExists;
            }
        }
    }
    #endregion

    #region navigation to register pages
    private void NavigateToRegister()
    {
        if (_authState != null && _authState.User != null)
        {
            // If the user signed in and have no data in its data table
            if (_authState.User.IsInRole(Company))  // If the user role is Company
            {
                NavManager.NavigateTo("/registerprofile"); // Route to the company registration page
            }
            else if (_authState.User.IsInRole(Student)) // If the role is Student
            {
                NavManager.NavigateTo("/registerprofile"); // Route to the student registration page
            }
        }
    }
    #endregion

    #region Delete function calls for student and company
    private async Task DeleteStudentData(int id)
    {
        if (isConfirmationChecked)
        {
            await _skillService.DeleteSkills(id);
            await _studentService.Delete(id);
            NavManager.NavigateTo("/");
        }
    }

    private async Task DeleteCompanyData(int id)
    {
        if (isConfirmationChecked)
        {
            await _companyService.Delete(id);
            NavManager.NavigateTo("/");
        }
    }
    #endregion

    #region Re-RenderPage function for re-renderint the profile page on change
    private async void ReRenderPage()
    {
        await ReadData();
        StateHasChanged();
    }
    #endregion

    #region Navigate to company website Link with opening new window
    public async Task NavigateToNewTab()
    {
        string url = "https://" + _company[0].Link;
        await jsRuntime.InvokeVoidAsync("open", url, "_blank");
    }
    #endregion

    #region Recover Student Data with their Guid
    private async Task RecoverStudentData()
    {
        if (userIdClaim != null && Guid.TryParse(userIdClaim, out Guid userIdGuid))
        {
            Message = await _studentService.RecoverStudentData(userIdGuid);
            _aletBox.SetMessage(true, Message, 2000, success: true);
            await OnInitializedAsync();
        }
        else
        {
            _aletBox.SetMessage(true, $"An error occurred while recovering the data!", 0, danger: true);
        }
    }
    #endregion

    #region Recover Companyt Data with their Guid
    private async Task RecoverCompanyData()
    {
        if (userIdClaim != null && Guid.TryParse(userIdClaim, out Guid userIdGuid))
        {
            Message = await _companyService.RecoverCompanyData(userIdGuid);
            _aletBox.SetMessage(true, Message, 2000, success: true);
            await OnInitializedAsync();
        }
        else
        {
            _aletBox.SetMessage(true, $"An error occurred while recovering the data!", 0, danger: true);
        }
    }
    #endregion

    #region Toggle Button For Add Section
    void ToggleAddSkillsSection()
    {
        isAddSectionVisible = !isAddSectionVisible;
    }
    #endregion

    #region Toggle button for Update section
    private async Task ToggleUpdateSkillsSection(int id)
    {
        isUpdateSectionVisible = true;
        _Skills = await _skillService.GetSkillsByStudentId(id);
    }
    #endregion

    #region Toggle For The Update Section
    void HideUpdateSection()
    {
        isUpdateSectionVisible = !isUpdateSectionVisible;
    }
    #endregion

    #region Add Skills Function
    private async Task AddSkills(int studentId)
    {
        Message = await _skillService.CreateSkills(studentId, _Skills);
        _aletBox.SetMessage(true, Message, 2000, success: true);
        await OnInitializedAsync();
        isAddSectionVisible = false;
    }
    #endregion

    #region Update Skills Function
    private async Task UpdateSkills(int studentId)
    {
        Message = await _skillService.UpdateSkills(studentId, _Skills);
        _aletBox.SetMessage(true, Message, 2000, success: true);
        isUpdateSectionVisible = false;
        await OnInitializedAsync();
    }
    #endregion

}
