@page "/profile"
@*Lavet af Jozsef*@

@using ElevPortalen.Pages.AlertBox
@using ElevPortalen.Pages.DialogModal
@using ElevPortalen.Pages.ProfilePage.CompanyProfile
@using ElevPortalen.Pages.ProfilePage.StudentProfile
@using ElevPortalen.Services;
@using ElevPortalen.Data;
@using ElevPortalen.Models;
@using System.Security.Claims

@inject StudentService _studentService
@inject CompanyService _companyService
@inject SkillService _skillService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavManager
@inject IJSRuntime jsRuntime

<div class="container p-4">
    <!--Autorizeview for Student and Company -->
    <AuthorizeView Roles="Student,Company,Admin">
        <Authorized>

            @if (context.User.IsInRole(Student))
            {
                <StudentProfile _user="_user"></StudentProfile>
            }
            else if (context.User.IsInRole(Company))
            {
                <CompanyProfile _user="_user"></CompanyProfile>
            }
            else
            {
                <p>
                    @if (_authState.User.IsInRole(Student) || _authState.User.IsInRole(Company))
                    {
                        <AlertBox IsVisible=true Message="Det ser ud til, at ingen personlige data er blevet tilføjet til din profil, klik på knappen for at registrere dine data."
                                    isWarning=true waitForSeconds="0"></AlertBox>
                    }
                    else
                    {
                        <AlertBox IsVisible=true Message="Du har ingen rolle tildelt!" isDanger=true waitForSeconds="0"></AlertBox>
                    }
                </p>
                <br>
                <button class="btn btn-success m-2" @onclick="NavigateToRegister">Registrer dine data</button>
                ;
                <br />

                @if (hasStudentRecoveryData)
                {
                    <button class="btn btn-success m-2" @onclick="RecoverStudentData">Gendan data</button>
                    @*      <p>The Student's Guid is : @userIdClaim</p> *@

                }
                else if (hasCompanyRecoveryData)
                {
                    <button class="btn btn-success m-2" @onclick="RecoverCompanyData">Gendan Firma data</button>
                    @*  <p>The Company's Guid is : @userIdClaim</p> *@
                }

            }

        </Authorized>

        <!-- Not authorized view -->
        <NotAuthorized>
            <AlertBox IsVisible=true Message="Please log in first." isDanger=true waitForSeconds="0"></AlertBox>
        </NotAuthorized>

    </AuthorizeView>

    <AlertBox @ref="_aletBox" />

</div>


@code {

    #region private fields within the scope of the class
    private AuthenticationState? _authState;
    private ClaimsPrincipal? _user;
    private AlertBox? _aletBox = new AlertBox();

    private bool isAuthenticated = false;

    private string Company = "Company";
    private string Student = "Student";
    private string? Message = "";


    private bool hasStudentRecoveryData = false;
    private bool hasCompanyRecoveryData = false;
    #endregion

    #region OnInitialize
    protected override async Task OnInitializedAsync()
    {
        // Getting the user current authentication state.
        _authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();

        if (_authState != null)
        {
            if (_authState.User.Identity?.IsAuthenticated == true && _authState != null && _authState.User != null)
            {
                _user = _authState.User;
                // If authenticated set the bool to true zhan read the users data from the data table with the help of ReadData function
                isAuthenticated = true;
            }
            else
            {
                isAuthenticated = false;
            }
        }
    }
    #endregion

    #region Checking is company has recovery data if nothing exist in their profile
    private async Task CheckIfCompanyHasDataToRecover(ClaimsPrincipal _user)
    {
        userIdClaim = _user.Claims.FirstOrDefault()!.Value;
        if (userIdClaim != null && Guid.TryParse(userIdClaim, out Guid userIdGuid))
        {
            bool recoveryDataExists = await _companyService.CheckRecoveryDataExist(userIdGuid);
            hasCompanyRecoveryData = recoveryDataExists;
        }

    }
    #endregion

    #region navigation to register pages
    private void NavigateToRegister()
    {
        if (_authState != null && _authState.User != null)
        {
            // If the user signed in and have no data in its data table
            if (_authState.User.IsInRole(Company))  // If the user role is Company
            {
                NavManager.NavigateTo("/registerprofile"); // Route to the company registration page
            }
            else if (_authState.User.IsInRole(Student)) // If the role is Student
            {
                NavManager.NavigateTo("/registerprofile"); // Route to the student registration page
            }
        }
    }
    #endregion

    #region Recover Student Data with their Guid
    private async Task RecoverStudentData()
    {
        if (userIdClaim != null && Guid.TryParse(userIdClaim, out Guid userIdGuid))
        {
            Message = await _studentService.RecoverStudentData(userIdGuid);
            _aletBox.SetMessage(true, Message, 2000, success: true);
            await OnInitializedAsync();
        }
        else
        {
            _aletBox.SetMessage(true, $"An error occurred while recovering the data!", 0, danger: true);
        }
    }
    #endregion

    #region Recover Companyt Data with their Guid
    private async Task RecoverCompanyData()
    {
        if (userIdClaim != null && Guid.TryParse(userIdClaim, out Guid userIdGuid))
        {
            Message = await _companyService.RecoverCompanyData(userIdGuid);
            _aletBox.SetMessage(true, Message, 2000, success: true);
            await OnInitializedAsync();
        }
        else
        {
            _aletBox.SetMessage(true, $"An error occurred while recovering the data!", 0, danger: true);
        }
    }
    #endregion

}
