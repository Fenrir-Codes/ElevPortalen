@page "/"
@*Lavet af Jozsef*@

@using ElevPortalen.Services;
@using ElevPortalen.Data;
@using ElevPortalen.Models;

@inject ElevPortalenDataDbContext _context
@inject StudentService _studentService
@inject CompanyService _companyService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IConfiguration Configuration
@inject NavigationManager NavManager

<PageTitle>Home</PageTitle>

@* HHTMl and its logic*@
<div class="container-fluid">

    <!-- Authorized Student and Company-->
    <AuthorizeView Roles="Student, Company, Admin">
        <Authorized>
            @if (_companyList.Count >= 1)
            {
                <!-- Display Company-related content -->
                <div class="container">
                    @foreach (var data in _companyList)
                    {
                        <div class="card border-secondary text-center m-2">
                            <div class="card-header">
                                @data.CompanyName
                            </div>
                            <div class="card-body">
                                <p class="card-text">@data.Description</p>
                                <a href="#" class="btn btn-primary">Vis</a>
                            </div>
                        </div>
                    }
                </div>
            }
            else if (_studentList.Count >= 1)
            {
                <!-- Display Student-related content -->
                <div class="container">
                    @foreach (var data in _studentList)
                    {
                        <div class="card text-center m-2">
                            <div class="card-header">
                                @data.LastName
                            </div>
                            <div class="card-body">
                                <h5 class="card-title">@data.Title</h5>
                                <p class="card-text">@data.Description</p>
                                <a href="#" class="btn btn-primary">Vis</a>
                            </div>
                        </div>
                    }
                </div>
            }
            else
            {
                Message = "Admin authorized";
                <p>@Message</p>
            }
        </Authorized>

        <NotAuthorized>
            <div class="container-fluid d-flex flex-column align-items-center justify-content-top">

                <div class="text-container mb-5" style="position:relative; text-align: center; z-index: 2;">
                    <h1>Velkommen til ElevPortalen</h1>
                    <div class="d-inline-flex align-items-center">
                        <a href="/Identity/Account/Login" class="btn mb-3 btn-hover-change" role="button" data-bs-toggle="button">Login</a>
                        <p> eller </p>
                        <a href="/Identity/Account/Register" class="btn mb-3 btn-hover-change" role="button" data-bs-toggle="button">Registrer</a>
                        <p> dig først</p>
                    </div>
                </div>
                <div class="bg-image-container text-center position-relative">
                    <img src="/images/Logo_ElevPortalen.png" class="bg-image" style="max-width:75%; height: auto; opacity: 0.1;">
                </div>
            </div>
        </NotAuthorized>
        
    </AuthorizeView>
</div>




@code {
    // private fields within the scope of the class
    private AuthenticationState? _authState;
    private List<StudentModel> _studentList = new List<StudentModel>();
    private List<CompanyModel> _companyList = new List<CompanyModel>();

    private bool isAuthenticated = false;
    private string Company = "Company";
    private string Student = "Student";
    private string Message = "";

    #region OnInitialize
    protected override async Task OnInitializedAsync()
    {
        // Getting the user current authentication state.
        _authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();

        if (_authState != null)
        {
            if (_authState.User.Identity?.IsAuthenticated == true)
            {
                // If authenticated set the bool to true zhan read the users data from the data table with the help of ReadData function
                isAuthenticated = true;

                await ReadAllData();
            }
            else if (_authState.User.IsInRole("Admin"))
            {
                Message = $"Admin logged in.";
            }
            else
            {
                isAuthenticated = false;
            }
        }
    }
    #endregion

    #region Reading the data from the database with the user claims
    public async Task ReadAllData()
    {
        if (_authState.User.IsInRole(Student)) // If the role is Student
        {
            //Getting the data
            _companyList = await _companyService.ReadAllCompanyData();
        }
        else if (_authState.User.IsInRole(Company)) // If the role is Company
        {
            //Getting the data with the service call from company
            _studentList = await _studentService.ReadAllStudentData();
        }
        else
        {
            return;
        }
    }
    #endregion

    #region Navigate to profile function
    private void GoToProfile()
    {
        NavManager.NavigateTo("/profile");
    }
    #endregion

}
