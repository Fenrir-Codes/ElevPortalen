@page "/"
@*Lavet af Jozsef*@

@using ElevPortalen.Services;
@using ElevPortalen.Data;
@using ElevPortalen.Models;

@inject StudentService _studentService
@inject CompanyService _companyService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavManager
@inject IJSRuntime jsRuntime

<PageTitle>Home</PageTitle>

@* HHTMl and its logic*@
<div class="container-fluid text-center p-4">

    <!-- Authorized Student and Company-->
    <AuthorizeView Roles="Student, Company, Admin">
        <Authorized>
            @if (_companyList.Count >= 1 && context.User.IsInRole(Student))
            {
                isStudent = true;
                <!-- this is the searchBox component here-->
                <div class="d-flex justify-content-center w-100 mb-4">
                    <SearchBox Items="_companyList" OnSearch="onSearch"></SearchBox>
                </div>

                <!-- Display Company-related content -->
                <div class="container">
                    <div class="row">
                        @foreach (var data in _companySearchResult)
                        {
                            <div class="col-12 col-sm-6 col-md-4 col-lg-3 mb-4">
                                <div class="our-team">
                                    <div class="team-content">
                                        <h3 style="font-size:20px" class="name">@data.CompanyName</h3>
                                    </div>
                                    <ul class="social">
                                        <li><a @onclick="() => NavigateToNewTab(data.Link)" class="fa-solid fa-up-right-from-square"></a></li>
                                        <li><a href="#" class="fa fa-linkedin"></a></li>
                                    </ul>
                                </div>
                            </div>
                        }
                    </div>
                </div>

            }
            else if (_studentList.Count >= 1 && context.User.IsInRole(Company))
            {
                isCompany = true;
                <!-- this is the searchBox component here-->
                <div class="d-flex justify-content-center w-100 mb-4">
                    <SearchBox Items="_studentList" OnSearch="onSearch"></SearchBox>
                </div>

                <!-- Display Student-related content -->
                <div class="container">
                <div class="row">
                    @foreach (var data in _studentSearchResult)
                    {
                            <div class="col-12 col-sm-6 col-lg-3">
                                <div class="our-team">
                                    <div class="picture">
                                        @if (data.profileImage != "")
                                        {
                                            <img class="img-fluid" src="images/ProfileImages/@data.profileImage">
                                        }
                                        else
                                        {
                                            <img class="img-fluid" src="images/DefaultAvatar.jpg">
                                        }
                                    </div>
                                    <div class="team-content">
                                        <h3 class="name">@data.FirstName @data.LastName</h3>
                                        <h4 class="title">@data.Speciality</h4>
                                    </div>
                                    <ul class="social">
                                        <li><a href="#" class="fa fa-facebook" aria-hidden="true"></a></li>
                                        <li><a href="#" class="fa fa-linkedin" aria-hidden="true"></a></li>
                                    </ul>
                                </div>
                            </div>
                    }
                    </div>
                </div>
            }
            else
            {
                isStudent = false;
                isCompany = false;


                Message = "Wellcome " + context.User.Identity.Name;
                <p>@Message</p>
                <p>@Datenow</p>

            }
        </Authorized>

        <NotAuthorized>        
            <div class="container-fluid d-flex flex-column align-items-center justify-content-center position-relative">
                <div class="bg-image-container text-center position-absolute top-50 start-50 translate-middle" style="z-index: 1;">
                    <img src="/images/Logo_ElevPortalen.png" class="bg-image" style="max-width: 75%; height: auto; opacity: 0.1;">
                </div>

                <div class="text-container mb-5" style="text-align: center; z-index: 2;">
                    <h1>Velkommen til ElevPortalen</h1>
                    <div class="d-inline-flex align-items-center">
                        <a href="/Identity/Account/Login" class="btn mb-3 btn-hover-change" role="button" data-bs-toggle="button">Login</a>
                        <p> eller </p>
                        <a href="/Identity/Account/Register" class="btn mb-3 btn-hover-change" role="button" data-bs-toggle="button">Registrer</a>
                        <p> dig først</p>
                    </div>
                    <div>
                        <p> Studenter i databasen @studentCount</p>
                        <p> Firmaer i databasen @companyCount</p>
                    </div>
                </div>
            </div>



        </NotAuthorized>
        
    </AuthorizeView>

</div>




@code {
    // private fields within the scope of the class
    private AuthenticationState? _authState;
    private List<StudentModel> _studentList = new List<StudentModel>();
    private List<CompanyModel> _companyList = new List<CompanyModel>();

    private List<CompanyModel> _companySearchResult = new List<CompanyModel>();
    private List<StudentModel> _studentSearchResult = new List<StudentModel>();


    private bool isAuthenticated = false;
    private bool isStudent = false;
    private bool isCompany = false;
    private string Company = "Company";
    private string Student = "Student";
    private string Admin = "Admin";
    private string Message = "";
    private string Datenow = "";

    private int studentCount = 0;
    private int companyCount = 0;

    #region OnInitialize
    protected override async Task OnInitializedAsync()
    {
        Datenow = "Idag er " + DateTime.Now.ToString("dd, MMMM, yyyy") + ".";

        // Getting the user current authentication state.
        _authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();

        if (_authState != null)
        {
            if (_authState.User.Identity?.IsAuthenticated == true)
            {
                // If authenticated set the bool to true than read the users data from the data table with the help of ReadData function
                isAuthenticated = true;

                await ReadAllData();
            }
            else if (_authState.User.IsInRole("Admin"))
            {
                Message = $"Admin logged in.";
            }
            else
            {
                isAuthenticated = false;
                studentCount = await _studentService.GetStudentCountAsync();
                companyCount = await _companyService.GetCompaniesCountAsync();
            }
        }
    }
    #endregion

    #region Reading the data from the database with the user claims
    public async Task ReadAllData()
    {
        if (_authState.User.IsInRole(Student)) // If the role is Student
        {
            //Getting the data
            _companyList = await _companyService.ReadAllCompanyData();

            _companySearchResult.Clear();
            _companySearchResult = _companyList;
        }
        else if (_authState.User.IsInRole(Company)) // If the role is Company
        {
            //Getting the data with the service call from company
            _studentList = await _studentService.ReadAllStudentData();

            _studentSearchResult.Clear();
            _studentSearchResult = _studentList;
        }
        else
        {
            return;
        }
    }
    #endregion

    #region Navigate to profile function
    private void GoToProfile()
    {
        NavManager.NavigateTo("/profile");
    }
    #endregion

    #region outcommented code
    // private async Task HandleInputChange(ChangeEventArgs e)
    // {
    //     searchTerm = e.Value.ToString();
    //     await SearchPostalCodes();
    // }

    // private async Task SearchPostalCodes()
    // {
    //     try
    //     {
    //         var text = char.ToUpper(searchTerm[0]) + searchTerm.Substring(1);
    //         postalCodes = await PostalCodeService.GetPostalCodes(text);
    //     }
    //     catch (Exception ex)
    //     {
    //         // Handle the exception as needed
    //         Console.WriteLine(ex.Message);
    //     }
    // }
    #endregion

    #region opening link in a new window
    public async Task NavigateToNewTab(string weblink)
    {
        string url = "https://" + weblink;
        await jsRuntime.InvokeVoidAsync("open", url, "_blank");
    }
    #endregion

    #region search function
    void onSearch(string searchTerm)
    {
        // if the input field empty
        if (string.IsNullOrEmpty(searchTerm))
        {
            // if student loggied in
            if (isStudent)
            {
                _companySearchResult = _companyList; // list companies
            }
            else if (isCompany)
            {
                _studentSearchResult = _studentList;
            }
            else
            {
                _studentSearchResult.Clear();
                _companySearchResult.Clear();
            }
        }
        else
        {

            if (isStudent)
            {
                _companySearchResult = _companyList.Where(company => company.CompanyName.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                company.Preferences.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)).ToList();
            }
            else if(isCompany)
            {
                _studentSearchResult = _studentList
                    .Where(student =>
                        student.Title.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                        student.Speciality.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                        student.FirstName.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                        student.LastName.Contains(searchTerm, StringComparison.OrdinalIgnoreCase))
                    .ToList();

            }
            else
            {
                _studentSearchResult.Clear();
                _companySearchResult.Clear();
            }
        }
    }
    #endregion

}
