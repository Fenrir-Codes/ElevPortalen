@page "/"
@*Lavet af Jozsef*@

@using ElevPortalen.Services;
@using ElevPortalen.Data;
@using ElevPortalen.Models;

@inject ElevPortalenDataDbContext _context
@inject StudentService _studentService
@inject CompanyService _companyService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IConfiguration Configuration
@inject NavigationManager NavManager

<PageTitle>Home</PageTitle>

@* HHTMl and its logic*@
<div class="container-fluid">

    @if (isAuthenticated)
    {
        <div class="container-fluid">
            <p>Go check your profile</p>
            <button class="btn btn-success" @onclick="GoToProfile">Go to profile</button>
            <br>
            <hr />

            @if (_authState.User.IsInRole(Student) && _companyList.Count >= 1)
            {
                <!-- Display Company-related content -->
                <div class="card">
                    @foreach (var data in _companyList)
                    {
                        <div class="card-header">
                            @data.CompanyId
                        </div>
                        <div class="card-body">
                            <h5 class="card-title">@data.CompanyName</h5>
                            <p class="card-text">@data.Description</p>
                            <a href="#" class="btn btn-primary">Vis</a>
                        </div>
                    }
                </div>
            }
            else if (_authState.User.IsInRole(Company) && _studentList.Count >= 1)
            {
                <!-- Display Student-related content -->
                <div class="card">
                    @foreach (var data in _studentList)
                    {
                        <div class="card-header">
                            @data.LastName
                        </div>
                        <div class="card-body">
                            <h5 class="card-title">@data.Title</h5>
                            <p class="card-text">@data.Description</p>
                            <a href="#" class="btn btn-primary">Vis</a>
                        </div>
                    }
                </div>
            }
            else
            {
                <p>@Message</p>
            }
        </div>
    }
    else
    {
        <!-- Display message when not authenticated -->
        Message = "Please login first.";
        <p>@Message</p>
    }
</div>


@code{
    // private fields within the scope of the class
    private AuthenticationState? _authState;
    private List<StudentModel> _studentList = new List<StudentModel>();
    private List<CompanyModel> _companyList = new List<CompanyModel>();

    private bool isAuthenticated = false;
    private string Company = "Company";
    private string Student = "Student";
    private string Message = "";

    #region OnInitialize
    protected override async Task OnInitializedAsync()
    {
        // Getting the user current authentication state.
        _authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();

        if (_authState != null)
        {
            if (_authState.User.Identity?.IsAuthenticated == true)
            {
                // If authenticated set the bool to true zhan read the users data from the data table with the help of ReadData function
                isAuthenticated = true;

                await ReadAllData();
            }
            else
            {
                isAuthenticated = false;
            }
        }
    }
    #endregion

    #region Reading the data from the database with the user claims
    public async Task ReadAllData()
    {
        if (_authState.User.IsInRole(Student)) // If the role is Student
        {
            //Getting the data 
            _companyList = await _companyService.ReadAllCompanyData();
        }
        else if (_authState.User.IsInRole(Company)) // If the role is Company
        {
            //Getting the data with the service call from company
            _studentList = await _studentService.ReadAllStudentData();
        }
        else
        {
            Message = $"Could not read data.";
        }
    }
    #endregion

    #region Navigate to profile function
    private void GoToProfile(){
        NavManager.NavigateTo("/profile");
    }
    #endregion

}
   