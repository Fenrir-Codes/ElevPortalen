@page "/viewstudent"

@using ElevPortalen.Pages.AlertBox
@using ElevPortalen.Data;
@using ElevPortalen.Services;
@using ElevPortalen.Models;

@inject StudentService _studentService
@inject SkillService _skillService
@inject MessageService _messageService

@foreach (var data in _student)
{
    <!--Social links container-->
    <div class="row">
        <div class="col-lg-12">
            <div class="card mb-2">
                <div class="card-body shadow-sm">
                    <div class="row">
                        <div class="col-lg-12">
                            <div class="d-flex align-items-center">
                                <a href="#" class="mx-2" style="color: black">
                                    <span class="fa-stack fa-sm">
                                        <i class="fas fa-circle fa-stack-2x"></i>
                                        <i class="fab fa-facebook fa-stack-1x fa-inverse"></i>
                                    </span>
                                </a>
                                <a href="#" class="mx-2" style="color: black">
                                    <span class="fa-stack fa-sm">
                                        <i class="fas fa-circle fa-stack-2x"></i>
                                        <i class="fab fa-instagram fa-stack-1x fa-inverse"></i>
                                    </span>
                                </a>
                                <a href="#" class="mx-2" style="color: black">
                                    <span class="fa-stack fa-sm">
                                        <i class="fas fa-circle fa-stack-2x"></i>
                                        <i class="fab fa-linkedin fa-stack-1x fa-inverse"></i>
                                    </span>
                                </a>
                                <a href="#" class="mx-2" style="color: black">
                                    <span class="fa-stack fa-sm">
                                        <i class="fas fa-circle fa-stack-2x"></i>
                                        <i class="fab fa-github fa-stack-1x fa-inverse"></i>
                                    </span>
                                </a>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!--User profile container-->
    <div class="row">
        <div class="col-lg-4">
            <div class="card mb-2 shadow-sm">
                <div class="card-body text-center">
                    @if (data.profileImage != "")
                    {
                        <img src="images/ProfileImages/@data.profileImage" alt="avatar"
                             class="rounded-circle img-fluid" style="width: 150px; height:150px;">
                    }
                    else
                    {
                        <img src="images/DefaultAvatar.jpg" alt="avatar"
                             class="rounded-circle img-fluid" style="width: 150px;">
                    }
                    <h5 class="my-3">
                        @data.FirstName
                        @data.LastName
                    </h5>
                    <p class="text-muted mb-3">Specialiseret i @data.Speciality</p>
                    <div class="d-flex justify-content-center mb-3">
                    </div>
                </div>
            </div>
        </div>
        <div class="col-lg-8">
            <div class="card mb-2">
                <div class="card-body shadow-sm">
                    <div class="row">
                        <div class="col-sm-3">
                            <p class="mb-0">Title</p>
                        </div>
                        <div class="col-sm-9">
                            <p class="text-muted mb-0">@data.Title</p>
                        </div>
                    </div>
                    <hr />
                    <div class="row">

                        <div class="col-sm-3">
                            <p class="mb-0">Fulde navn</p>
                        </div>
                        <div class="col-sm-9">
                            <p class="text-muted mb-0">
                                @data.FirstName <span> </span>
                                @if (!string.IsNullOrEmpty(data.MiddleName))
                                {
                                    @data.MiddleName <span> </span>
                                }
                                @data.LastName
                            </p>
                        </div>
                    </div>
                    <hr>
                    <div class="row">
                        <div class="col-sm-3">
                            <p class="mb-0">Mobile</p>
                        </div>
                        <div class="col-sm-9">
                            <p class="text-muted mb-0">@data.PhoneNumber</p>
                        </div>
                    </div>
                    <hr>
                    <div class="row">
                        <div class="col-sm-3">
                            <p class="mb-0">Adresse</p>
                        </div>
                        <div class="col-sm-9">
                            <p class="text-muted mb-0">@data.Address</p>
                        </div>
                    </div>
                    <hr>
                    <div class="row">
                        <div class="col-sm-3">
                            <p class="mb-0">Kontakt</p>
                        </div>
                        <div class="col-sm-9">
                            <button class="btn btn-success mb-0 btn-sm" @onclick="SendMessage">Send besked</button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!--Description-->
    <div class="row">
        <div class="col-lg-12">
            @*   <p class="mb-2 fw-bold">Beskrivelse</p> *@
            <div class="card mb-2">
                <div class="card-body shadow-sm">
                    <p class="m-1">@data.Description</p>
                </div>
            </div>
        </div>
    </div>

    <!-- Skills section -->
    <div class="row">
        <div class="col-lg-12">
            <div class="card mb-2">
                <div class="card-body shadow-sm">
                    <h6 class="fw-bold">Færdigheder</h6>
                    <div class="row">
                        <div class="col-lg-12">
                            <!--Show skill names section-->
                            @if (data != null && data.Skills != null)
                            {
                                <div class="col-lg-12">
                                    <!--display the names of the skills in a single row-->
                                    <h5>
                                        @foreach (var skillName in _SkillsOfStudent)
                                        {
                                            <span class="badge bg-dark m-1">@skillName</span>
                                        }
                                    </h5>
                                </div>
                            }
                            else
                            {

                            }
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

}

<AlertBox @ref="_alertBox" />

@code {
    [Parameter]
    public int Id { get; set; }
    private string? Message = "";

    private List<StudentModel> _student = new List<StudentModel>();
    private List<string> _SkillsOfStudent = new List<string>();
    private AlertBox _alertBox = new AlertBox();
    private MessageModel _messageData = new MessageModel();

    #region Oninitialize
    protected override async Task OnInitializedAsync()
    {
        await GetStudentProfile(Id);
        await GetSkills(_student);
    }
    #endregion

    #region Getting the data with the service call from student
    public async Task GetStudentProfile(int id)
    {
        _student = await _studentService.GetStudentByIdToList(id);
    }
    #endregion

    #region Getting the skill Name to List (string)
    private async Task GetSkills(List<StudentModel> data)
    {
        foreach (var studentData in _student)
        {
            _SkillsOfStudent = await _skillService.GetSkills(studentData);
        }
    }
    #endregion


    private async Task SendMessage()
    {
        try
        {
            _messageData = new MessageModel()
            {
                    SenderId = 3,
                    ReceiverId = 18,
                    SenderName = "Microcom A/S",
                    Subject = "Testing sending",
                    Content = "This is a test message sent from the view page from microcom to Jozsef Bali.",
                    Timestamp = DateTime.Now,
                    IsRead = false
            };

            Message = await _messageService.SaveMessage(_messageData);
            _alertBox.SetMessage(true, Message, 2000, success: true);
        }
        catch (Exception ex)
        {
            _alertBox.SetMessage(true, $"Error - {ex.Message}", 0, danger: true);
        }
    }

}
