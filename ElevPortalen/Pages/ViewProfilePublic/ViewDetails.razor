@page "/viewdetails/{Id:int}"

@using ElevPortalen.Pages.AlertBox
@using ElevPortalen.Pages.ViewProfilePublic.CompanyView
@using ElevPortalen.Pages.ViewProfilePublic.StudentView

@using System.Security.Claims

@inject AuthenticationStateProvider AuthenticationStateProvider

<PageTitle>Details</PageTitle>

<div class="container p-4">

    <AuthorizeView Roles="Company,Student,Admin">

        <Authorized>
            @if (context.User.IsInRole(Company))
            {
                <ViewStudent Id="Id"></ViewStudent>
            }
            else if (context.User.IsInRole(Student))
            {
                <ViewCompany Id="Id"></ViewCompany>
            }
            else
            {
                _alertBox.SetMessage(true, "Error in viewDetail page!", 0, danger: true);
            }
        </Authorized>

        <NotAuthorized>
            <AlertBox IsVisible=true Message="You need to log in first." isDanger=true waitForSeconds="0"></AlertBox>
        </NotAuthorized>

    </AuthorizeView>


</div>
<AlertBox @ref="_alertBox" />

@code {
    [Parameter]
    public int Id { get; set; }
    private AuthenticationState? _authState;
    private ClaimsPrincipal? _user;
    private AlertBox _alertBox = new AlertBox();

    private string Company = "Company";
    private string Student = "Student";

    #region Oninitialize
    protected override async Task OnInitializedAsync()
    {
        await Authenticate();
    }
    #endregion

    #region Authentivate user and read data according to Role
    private async Task Authenticate()
    {
        // Getting the user current authentication state.
        _authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
    }
    #endregion

}